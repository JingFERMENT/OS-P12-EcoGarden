# config/packages/security.yaml
security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false # dev firewall does not require authentication
        login: #Handles JSON login when the client submits their email/password to get a JWT token.
            pattern: ^/api/auth
            stateless: true
            json_login: #Enables JSON-based authentication.
                check_path: /api/auth # Symfony listens on this route for POST requests with credentials.
                success_handler: lexik_jwt_authentication.handler.authentication_success # Handles successful authentication and returns a JWT token.
                failure_handler: lexik_jwt_authentication.handler.authentication_failure # Handles failed authentication attempts.
        api:
            pattern: ^/ # Matches all API routes(/conseil, /user, etc.)
            stateless: true
            jwt: ~ # Enables JWT authentication for the API routes.
            entry_point: App\Security\CustomAuthenticationEntryPoint
            access_denied_handler: App\Security\CustomAccessDeniedHandler
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        # used to reload user from session & other features (e.g. switch_user)
    
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
    # Public access for registration and login
        - { path: ^/api/user, methods: [POST], roles: PUBLIC_ACCESS } # Create an account
        - { path: ^/api/doc, roles: PUBLIC_ACCESS } # API Doc
        - { path: ^/api/auth, roles: PUBLIC_ACCESS } # Log in and get a JWT token
        
    # üîê Authenticated user access
    # Get all advice of the current month or specific month
        - { path: ^/api/conseil, methods: [GET], roles: IS_AUTHENTICATED_FULLY } 
    # Get weather (user's city or given city)
        - { path: ^/api/meteo, methods: [GET], roles: IS_AUTHENTICATED_FULLY }
        
    # üîê Admin access
        - { path: ^/api/conseil$, methods: [POST], roles: ROLE_ADMIN } # Add a new advice
        - { path: ^/api/conseil/\d+$, methods: [GET, PUT, DELETE], roles: ROLE_ADMIN } 
        - { path: ^/api/user/\d+$, methods: [GET, PUT, DELETE], roles: ROLE_ADMIN } # Update or delete a user